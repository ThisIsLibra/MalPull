/*
 * Copyright (C) 2020 Max 'Libra' Kersten [@Libranalysis, https://maxkersten.nl]
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package malpull.endpoints;

import malpull.exceptions.SampleNotFoundException;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.util.List;
import net.lingala.zip4j.ZipFile;
import net.lingala.zip4j.exception.ZipException;
import net.lingala.zip4j.io.inputstream.ZipInputStream;
import net.lingala.zip4j.model.FileHeader;
import okhttp3.MultipartBody;
import okhttp3.RequestBody;
import org.json.JSONObject;

/**
 * This class is used to get a sample from the MalwareBazaar database via its
 * API.
 *
 * @author Max 'Libra' Kersten [@Libranalysis, https://maxkersten.nl]
 */
public class MalwareBazaar extends GenericEndpoint implements IEndpoint {

    /**
     * Creates an object to interact with the MalwareBazaar API
     *
     */
    public MalwareBazaar() {
        //Sets the apiBase variable in the abstract GenericEndpoint class
        super("https://mb-api.abuse.ch/api/v1/", "MalwareBazaar");
    }

    /**
     * Gets the sample from MalwareBazaar, if it is present. Throws an exception
     * if it is not present.
     *
     * @param hash the hash to look for
     * @return the sample as a byte array
     * @throws SampleNotFoundException if the sample cannot be found
     */
    @Override
    public byte[] getSample(String hash) throws SampleNotFoundException {
        try {
            //Get the SHA-256 hash via the search function of the API, as only SHA-256 hashes can be used when downloading a sample
            String sha256Hash = getSha256Hash(hash);
            //If it cannot be found, there is no such sample
            if (sha256Hash.isEmpty()) {
                throw new SampleNotFoundException("Sample " + hash + " not found on MalwareBazaar!");
            }
            //If the sample exists, download it
            return download(sha256Hash);
        } catch (IOException e) {
            throw new SampleNotFoundException("Something went wrong when handling the file in the temporary files folder");
        }

    }

    /**
     * Get the SHA-256 hash based upon a given MD-5, SHA-1, or SHA-256 hash. The
     * download API of MalwareBazaar only accepts SHA-256 hashes when queried.
     *
     * @param hash the hash to query the back-end for, and obtain the SHA-256
     * hash of the sample
     * @return the SHA-256 hash of the given sample
     * @throws HttpConnectionFailed if no connection can be made from the
     * current machine, or to the given host
     * @throws SampleNotFoundException if the sample cannot be found
     */
    private String getSha256Hash(String hash) throws SampleNotFoundException {
        //Create a new request body for the HTTP POST request
        RequestBody requestBody = new MultipartBody.Builder()
                .setType(MultipartBody.FORM)
                .addFormDataPart("query", "get_info")
                .addFormDataPart("hash", hash)
                .build();
        //Get the result from the request
        byte[] result = downloader.post(apiBase, requestBody);
        //Convert the result into a string
        String json = new String(result);
        //Convert the string into a JSON object
        JSONObject jsonObject = new JSONObject(json);
        //CHeck if the query status is OK
        if (jsonObject.optString("query_status", "").equalsIgnoreCase("ok")) {
            //Return the SHA-256 hash
            return jsonObject.getJSONArray("data").getJSONObject(0).getString("sha256_hash");
        } else {
            //If the status is not OK, the sample is not present
            throw new SampleNotFoundException("Sample " + hash + " not found on MalwareBazaar!");
        }
    }

    /**
     * Download the sample from the API
     *
     * @param hash the SHA-256 hash of the sample to download
     * @return the API's response, which is the raw file
     * @throws malpull.exceptions.SampleNotFoundException if the sample cannot be foun
     * @throws java.io.IOException if the creation or deletion of the file in
     * the temp folder fails for any reason
     */
    public byte[] download(String hash) throws SampleNotFoundException, IOException {
        String tempPath = System.getProperty("java.io.tmpdir") + System.getProperty("file.separator") + hash;
        //Create the request body for the HTTP POST request with the form data
        RequestBody requestBody = new MultipartBody.Builder()
                .setType(MultipartBody.FORM)
                .addFormDataPart("query", "get_file")
                .addFormDataPart("sha256_hash", hash)
                .build();
        //Return the API's response
        byte[] zip = downloader.post(apiBase, requestBody);

        File localFile = new File(tempPath);
        localFile.getParentFile().mkdirs();
        Files.write(localFile.toPath(), zip); //overwrites if it exists, not thread safe when downloading the same data, unless a unique path is given

        String password = "infected";

        try {
            ZipFile zipFile = new ZipFile(localFile);
            if (zipFile.isEncrypted()) {
                zipFile.setPassword(password.toCharArray());
            }

            List<FileHeader> headers = zipFile.getFileHeaders();
            ZipInputStream inputStream = zipFile.getInputStream(headers.get(0));
            ByteArrayOutputStream outputStream = new ByteArrayOutputStream();

            int offset = -1;
            byte[] buff = new byte[1024];
            while ((offset = inputStream.read(buff)) != -1) {
                outputStream.write(buff, 0, offset);
            }
            localFile.delete();
            return outputStream.toByteArray();
        } catch (ZipException e) {
            throw new IOException("Error whilst handling the ZIP archive:\n" + e.getMessage());
        }
    }

}
